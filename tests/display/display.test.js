QUnit.module("display", () => {
	QUnit.module("dec", () => {
		var currSys = 'dec';
		QUnit.test("length <= 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 123;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '123', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '7B', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '123', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '173', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '1111011', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize + "px", "display bin size correctly");
		});
		QUnit.test("length > 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 1234567;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '1234567', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '12D687', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '1234567', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '4553207', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '100101101011010000111', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize/2 + "px", "display bin size correctly");
		});
	});
	QUnit.module("hex", () => {
		var currSys = 'hex';
		QUnit.test("length <= 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 123;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '7B', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '7B', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '123', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '173', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '1111011', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize + "px", "display bin size correctly");
		});
		QUnit.test("length > 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 1234567;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '12D687', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '12D687', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '1234567', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '4553207', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '100101101011010000111', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize/2 + "px", "display bin size correctly");
		});
	});
	QUnit.module("oct", () => {
		var currSys = 'oct';
		QUnit.test("length <= 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 123;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '173', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '7B', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '123', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '173', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '1111011', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize + "px", "display bin size correctly");
		});
		QUnit.test("length > 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 1234567;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '4553207', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '12D687', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '1234567', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '4553207', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '100101101011010000111', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize/2 + "px", "display bin size correctly");
		});
	});
	QUnit.module("bin", () => {
		var currSys = 'bin';
		QUnit.test("length <= 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 123;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '1111011', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '7B', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '123', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '173', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '1111011', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize + "px", "display bin size correctly");
		});
		QUnit.test("length > 18", (assert) => {
			var mainSize = parseFloat($('#main').css('font-size'));
			var valSize = parseFloat($('.value').css('font-size'));
			var val = 1234567;
			display(val, currSys);
			assert.deepEqual($('#main').text(), '100101101011010000111', "display main value correctly");
			assert.deepEqual($('.value#hex').text(), '12D687', "display hex value correctly");
			assert.deepEqual($('.value#dec').text(), '1234567', "display dec value correctly");
			assert.deepEqual($('.value#oct').text(), '4553207', "display oct value correctly");
			assert.deepEqual($('.value#bin').text(), '100101101011010000111', "display bin value correctly");
			assert.deepEqual($('#main').css('font-size'), mainSize/2 + "px", "display main size correctly");
			assert.deepEqual($('.value#hex').css('font-size'), valSize + "px", "display hex size correctly");
			assert.deepEqual($('.value#dec').css('font-size'), valSize + "px", "display dec size correctly");
			assert.deepEqual($('.value#oct').css('font-size'), valSize + "px", "display oct size correctly");
			assert.deepEqual($('.value#bin').css('font-size'), valSize/2 + "px", "display bin size correctly");
		});
	});
});